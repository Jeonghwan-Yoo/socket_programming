21-1 Asynchronous Notification IO 모델의 이해
select 모델을 개선한 방식.

Synchronous와 Asynchronous에 대한 이해
비동기의 상황은 데이터의 입출력 과정에서도 매우 유용하게 활용된다.
send & recv 함수를 통해서 동기화된 입출력을 진행하였다.
send 함수가  호출되면 데이터의 전송이 완료된 후에야 반환이 이뤄지고(출력버퍼로 데이터가 완전히 전송되어야),
recv 함수가 호출되면 원하는 만큼 데이터를 읽어 들인 후에야 반환이 이뤄지기 때문에 동기화된 입출력을 진행한 셈이다.
동기화를 말하는 포인트는 함수의 호출 및 반환시점과 데이터의 송수신 시작 및 완료시점이다.
send 함수가 호출되는 순간부터 데이터의 전송이 시작되고, send 함수의 호출이 완료(반환)되는 순간 데이터의 전송이 완료된다.
recv 함수가 호출되는 순간부터 데이터의 수신이 시작되고, recv 함수의 호출이 완료(반환)되는 순간 데이터의 수신이 완료된다.
전송완료는 출력버퍼의 전송완료를 뜻한다.
동기
전송시작 전송완료   수신시작    수신완료
--┼--------┼----------┼---------┼----> 시간흐름
send 호출 send 반환  recv 호출  recv 반환
비동기
전송시작 전송완료   수신시작    수신완료
--┼--------┴----------┼---------┴----> 시간흐름
send 호출 및 반환    recv 호출 및 반환
비동기 입출력이란 입출력 함수의 반환시점과 데이터 송수신의 완료시점이 일치하지 않는 경우.

동기화된 입출력의 단점과 비동기의 해결책
입출력이 진행되는 동안 호출된 함수가 반환을 하지 않으니, 다른 일을 할 수가 없다.
비동기는 호출된 함수가 반환을 하기 때문에 다른 일을 진행할 수 있다.
비동기 방식은 동기 방식에 비해 보다 효율적으로 CPU를 활용하는 모델이 된다.

비동기 Notification 입출력 모델에 대한 이해
Notification IO는 입력버퍼에 데이터가 수신되어서 데이터의 수신이 필요하거나, 출력버퍼가 비어서 데이터의 전송이 가능한 상황의 알림이ㅏㄷ.
가장 대표적인 모델은 select 방식이다.
가장 대표적인 것이 수신된 데이터가 존재하는 상황이었다.
이러한 select 함수는 호출된 함수의 반환이라는 과정을 통해서 IO가 필요한, 또는 가능한 상황을 알린다.
이 알림이 이뤄지는 방식은 동기화되어 있다.
IO가 필요한 또는 가능한 상황이 되는 시점이(IO관련 이벤트의 발생 시점이) select 함수가 반환하는 시점과 일치한다.
즉, select 함수처럼 IO가 필요한, 또는 가능한 상황에서 반환이 이뤄지는 것이 아니라, IO의 상태에 상관없이 반환이 이뤄지는 방식이 비동기 Notification IO모델이다.
비동기 Notification IO에서는 IO의 관찰을 명령하기 위한 함수호출과 실제로 상태의 변화가 있었는지 확인하기 위한 함수호출이 분리되어 있다.
때문에 IO의 관찰을 명령하고 나서 다른 일을 열심히 하다가 이후에 상태의 변화가 실제로 있었는지 확인하는 것이 가능하다.

물론 select 함수도 타임아웃을 지정할 수 있습니ㅏㄷ.
select 함수도 타임아웃의 지정을 통해서 IO의 상태변화가 발생하지 않은 상황에서 블로킹 상태에 놓이지 않을 수 있다.
따라서 비동기와 유사한 형태의 코드를 작성할 수는 있다.
그러나 이후에 IO의 상태 변화를 확인하기 위해서는 핸들을 다시 모아서 재차 select 함수를 호출해야 한다.
select 함수는 기본적으로 동기화된 형태의 Notification IO 모델이다.

21-2 Asynchronous Notification IO 모델의 이해와 구현
두 가지 방법이 존재한다.
WSAEventSelect 함수를 사용하는 방법과 WSAAsyncSelect 함수를 사용하는 방법.
WSAAsyncSelect 함수를 사용하기 위해서는 발생한 이벤트를 수신할 윈도우의 핸들을 지정해야 하기 때문에(UI관련) 언급하지 않는다.

WSAEventSelct 함수와 Notification
소켓의 상태변화:소켓에 대한 IO의 상태변화
소켓의 이벤트 발생:소켓에 대한 IO관련 이벤트의 발생
둘 다 IO가 필요한, 또는 가능한 상황의 발생을 의미한다.
WSAEventSelct 함수는 임의의 소켓을 대상으로 이벤트 발생여부의 관찰을 명령할 때 사용하는 함수.
#include <winsock2.h>
int WSAEventSelct(SOCKET s, WSAEVENT hEventObject, long lNetworkEvents); // 성공 시 0, 실패 시 SOCKET_ERROR 반환
s:관찰대상인 소켓의 핸들 전달.
hEventObject:이벤트 발생유무의 확인을 위한 Event 오브젝트의 핸들 전달.
lNetworkEvents:감시하고자 하는 이벤트의 유형 정보전달.
WSAEventSelct 함수는 매개변수 s에 전달된 핸들의 소켓에서 lNetworkEvent에 전달된 이벤트 중 하나가 발생하면 hEventObject에 전달된 핸들의 커널 오브젝트를 signaled 상태로 바꾸는 함수.
즉, Event 오브젝트와 소켓을 연결하는 함수이다.
WSAEventSelect 함수는 이벤트의 발생유무에 상관없이 바로 반환을 하는 함수이기 때문에 함수호출 이후에 다른 작업을 진행할 수 있다.
이 함수는 비동기 Notification 방식을 취하고 있다.
세 번째 인자는 비트 OR 연산자를 통해서 둘 이상의 정보를 동시에 전달할 수 있다.
FD_READ:수신할 데이터가 존재하는가?
FD_WRITE:블로킹 없이 데이터 전송이 가능한가?
FD_OOB:Out-of-band 데이터가 수신되었는가?
FD_ACCEPT:연결요청이 있었는가?
FD_CLOSE:연결의 종료가 요청되었는가?
WSAEventSelect 함수는 단 하나의 소켓을 대상으로만 호출이 가능한 것처럼 보인다.
하지만 WSAEventSelect 함수를 이용하면 다수의 소켓을 대상으로 WSAEventSelect함수를 호출할 필요를 못 느낀다.
select 함수는 반환되고 나면 이벤트의 발생확인을 위해서 또 다시 모든 핸들을 대상으로 재호출해야 되지만,
WSAEventSelect 함수호출을 통해서 전달된 소켓의 정보는 운영체제에 등록이 되고, 이렇게 등록된 소켓에 대해서는 WSAEventSelect함수의 재호출이 불필요하기 때문.

epoll과 WSAEventSelect
한번 등록된 소켓에 대해서 WSAEventSelect 함수의 재호출이 불필요함을 설명했는데, 리눅스 기반의 epoll에서 처음 설명했다.

다음의 내용을 추가로 알아야 한다.
1. WSAEventSelect 함수의 두 번째 인자전달을 위한 Event 오브젝트의 생성방법
2. WSAEventSelect 함수호출 이후의 이벤트 발생 확인방법
3. 이벤트 발생이 확인된 경우, 발생된 이벤트의 유형을 확인하는 방법
나열된 순서중간에 WSAEventSelect 함수호출의 과정만 삽입하면 서버의 구현순서다.

manual-reset 모드 Event 오브젝트의 또 다른 생성방법
CreateEvent 함수는 Event 오브젝트를 생성하되, auto-reset 모드와 manual-reset 모드 중 하나를 선택해서 생성할 수 있는 함수였다.
여기서 필요한 것은 오로지 manual-reset 모드이면서 non-signaled 상태인 Event 오브젝트이다.
다음 함수를 이용해서 Event 오브젝트를 생성하는 것이 요러모로 편리하다.
#include <winsock2.h>
WSAEVENT WSACreateEvent(void); // 성공 시 Event 오브젝트 호출, 실패 시 WSA_INVALID_EVENT 반환
#define WSAEVENT HANDLE
커널 오브젝트의 핸들이 반환되는 것이다.
생성된 Event 오브젝트의 종료를 위한 함수는 별도로 마련되어 있다.
#include <winsock2.h>
BOOL WSACloseEvent(WSAEVENT hEvent); // 성공 시 TRUE, 실패 시 FALSE 반환

이벤트 발생유무의 확인
이벤트 발생유무의 확인을 위해서는 Event 오브젝트를 확인해야 한다.
매개변수가 하나 더 많다는 것을 제외하면, WaitForMultipleObjects 하뭇와 동일하다.
#include <winsock2.h>
DWORD WSAWaitForMultipleEvents(DWORD cEvents, const WSAEVENT* lphEvents, BOOL fWaitAll, DWORD dwTimeout, BOOL falertable);
// 성공 시 이벤트 발생 오브젝트 관련 정보, 실패 시 WSA_INVALID_EVENT 반환
cEvents:signaled 상태로의 전이여부를 확인할 Event 오브젝트의 개수 정보 전달.
lphEvents:Event 오브젝트의 핸들을 저장하고 있는 배열의 주소 값 전달.
fWaitAll:TRUE 전달 시 모든 Event 오브젝트가 signaled 상태일 때 반환, FALSE 전달 시 하나만 signaled 상태가 되어도 반환.
dwTimeout:1/1000초 단위로 타임아웃 지정, WSA_INFINITE 전달 시 signaled 상태가 될 때까지 반환하지 않는다.
fAlertable:TRUE 전달 시, alertable wait 상태로의 진입
반환 값:반환된 정수 값에서 상수 값 WSA_WAIT_EVENT_0을 빼면, 두 번째 매개변수로 전달된 배열을 기준으로, signaled 상태가 된 Event 오브젝트의 핸들이 저장된 인덱스가 게산된다.
만약에 둘 이상의 Event 오브젝트가 signaled 상태로 전이되었다면, 그 중 작은 인덱스 값이 계산된다.
그리고 타임아웃이 발생하면 WAIT_TIMEOUT이 반환된다.
소켓의 이벤트 발생에 의해서 Event 오브젝트가 signaled 상태가 되어야 반환하는 함수이므로 소켓의 이벤트 발생여부를 확인하기에 좋은 함수이다.
전달할 수 있는 최대 Event 오브젝트의 핸들 수가 64개로 제한되어 있으니, 그 이상의 핸들을 관찰해야 한다면 쓰레드의 생성을 통한 확장을 시도하거나,
핸들을 저장하고 있는 배열을 구분해서 함수를 두 번이 상 호출하는 방법을 고민해야 한다.

최대 핸들의 수
WSAWaitForMultipleEvents 함수가 동시에 관찰할 수 있는 최대 Event 오브젝트의 수는 매크로의 형태로 정의되어 있는 상수 WSA_MAXIMUM_WAIT_EVENTS을 확인하면 알 수 있다.
이 값은 현재 64로 정의되어 있다.
그러나 이 값은 변경될 가능성이 있다.

단 한번의 함수호출을 통해서 signaled 상태로 전이된 Event 오브젝트의 핸들정보 모두를 알 수는 없다.
이 함수가 반환하는 정보를 통해서 알 수 있는 것은 signaled 상태로 전이된 Event 오브젝트의 첫 번째(배열에 저장된 순서를 기준으로) 인덱스 값이 전부이기 때문이다.
하지만 여기서 생성하는 Event 오브젝트가 manual-reset 모드라는 사실을 참고하여 다음 방식으로 signaled 상태가 된 Event 오브젝트 모두를 확인할 수 있다.
int posInfo, startIdx, i;
...
posInfo = WSAWaitForMultipleEvents(numOfSock, hEventArray, FALSE, WSA_INFINITE, FALSE);
startIdx = posInfo - WSA_WAIT_EVENT_0;
...
for (i = startIdx; i < numOfSock, i++) {
    int sigEventIdx = WSAWaitForMultipleEvents(1, &hEventArray[i], TRUE, 0, FALSE);
    ...
}
signaled 상태에 놓인 첫 번째 Event 오브젝트에서부터 마지막 Event 오브젝트까지 순서대로 하나씩, signaled 상태로의 전이여부를 확인하고 있다.
(타임아웃 정보로 0이 전달되었으니, 함수호출과 동시에 반환이 이뤄진다.)
이는 Event 오브젝트가 manual-reset 모드이기 때문에 가능한 일이다.
그래서 비동기 Notification IO모델에서 Event 오브젝트가 manual-reset 모드여야 한다.

이벤트 종류의 구분
