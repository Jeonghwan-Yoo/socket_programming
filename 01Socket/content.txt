01-1 네트워크 프로그래밍과 소켓의 이해
네트워크 프로그래밍과 소켓에 대한 매우 간단한 이해
서로 다른 두 컴퓨터가 데이터를 주고받을 수 있도록 하는 것.
물리적 연결 -> 운영체제의 소켓

전화 받는 소켓의 구현
TCP 소켓은 전화기에 비유
소켓은 거는 용도의 소켓을 완성하는 방식과 받는 용도의 소켓을 완성하는 방식에 차이가 있다.

전화를 놓으려면 먼저 전화기를 하나 구입.
전화기에 해당하는 소켓을 생성하는 함수.
#include <sys/socket.h>
int socket(int domain, int type, int protocol); // 성공 시 파일 디스크립터, 실패 시 -1 반환

전화기를 장만했으니, 전화번호를 부여.
생성한 소켓애 IP와 포트번호라는 소켓의 주소정보에 해당하는 것을 할당해야 한다.
#include <sys/socket.h>
int bind(int sockfd, struct sockaddr* myaddr, socklen_t addrlen); // 성공 시 0, 실패 시 -1 반환

전화기가 전화 케이블에 연결되는 순간 전화를 받을 수 있는 상태.
다음 함수는 소켓을 연결요청이 가능한 상태가 되게 한다.
#include <ss/socket.h>
int listen(int sockfd, int backlog); // 성공 시 0, 실패 시 -1 반환

전화벨이 울리면 수화기를 들어야 한다.
수화기를 들었다는 것은 연결요청에 대한 수락을 의미.
#include <sys/socket.h>
int accept(int sockfd, struct sockaddr* addr, socklen_t* addrlen); // 성공 시 파일 디스크립터, 실패 시 -1 반환

1단계. 소켓 생성                socket 함수 호출
2단계. IP주소와 PORT번호 할당    bind 함수 호출
3단계. 연결요청 가능상태로 변경  listen 함수 호출
4단계. 연결요청에 대한 수락      accept 함수 호출

"Hello world!" 서버 프로그램의 구현
연결요청을 수락하는 기능의 프로그램을 가리켜 server.
hello_server.c

전화 거는 소켓의 구현
연결 요청을 진행하는 클라이언트 소켓.
클라이언트 소켓을 대상으로 호출하는 함수.
전화를 거는 기능의 함수.
#include <sys/socket.h>
int connect(int sockfd, struct sockaddr* serv_addr, socklen_t addrlen); // 성공 시 0, 실패 시 -1 반환

클라이언트 프로그램에서는 socket 함수호출을 통한 소켓의 생성과 connect 함수호출을 통한 서버로의 연결요청 과정만 존재.
hello_client.c

리눅스 기반에서 실행하기
gcc hello_servr.c -o hserver // hello_server.c 파일을 컴파일해서 hserver라는 이름의 실행파일을 만든다.
./hserver // 현재 디렉터리에 있는 hserver라는 이름의 파일을 실행.

실행을 위해서는 서버를 먼저 실행시켜야한다. 그 이후에 클라이언트의 요청.
멈춰서 있게 되는 것은 accept 함수가 반환하지 않았기 때문.
127.0.0.1은 로컬 컴퓨터의 주소의 IP를 뜻한다.
한대의 컴퓨터 내에서 서버와 클라이언트 프로그램을 모두 실행시킬 경우에는 이러한 전달방식.
다른 컴퓨터에서 실행된다면, 서버의 IP주소를 입력.

바로 재실행이 불가능하다.
재실행을 위해서는 실행과정에서 입력한 PORT번호를 모두 변경해서 실행해야 한다.

01-2 리눅스 기반 파일 조작하기
리눅스에서의 소켓조작은 파일조작과 동일하게 간주.
파일 입출력 함수로 데이터 송수신에 사용할 수 있다.
윈도우는 리눅스와 달리 파일과 소켓을 구분하고 있다.

Low-level File Access과 File Desscrioptor
저 수준이란 "표준에 상관없이 운영체제가 독립적으로 제공하는"
이후에 설명하는 함수들은 리눅스에서 제공하는 함수이지, ANSI 표준에서 정의한 함수가 아니다.
파일 디스크립터란 시스템으로부터 할당 받은 파일 또는 소켓에 부여된 정수를 의미한다.
파일 디스크립터      대상
0                   표준입력:Standard Input
1                   표준출력:Standard Output
2                   표준에러:Standard Error

일반적으로 파일과 소켓은 생성의 과정을 거쳐야 파일 디스크립터가 할당된다.
하지만 위의 3가지 입출력 대상은 별도의 생성과정을 거치지 않아도 프로그램이 실행되면
자동으로 할당되는 파일 디스크립터들이다.

File Desscrioptor(File Handle)
파일 또는 소켓을 생성할 때마다, 운영체제는 해당 파일 또는 소켓에 부여된 숫자 하나를 건네 준다.
결국 운영체제가 지칭을 편히 하기 위해 부여된 숫자.
윈도우 기반은 핸들, 리눅스 기반은 디스크립터.

파일 열기
첫 번째 인자로는 대상이 되는 파일의 이름 및 경로 정보, 두 번째 인자로는 파일의 오픈 모드 정보(파일의 특성 정보)를 전달한다.
#include <sys/types.h>
#include <sys/stat.h>
#incldue <fcntl.h>
int open(const char* path, int flag); // 성공 시 파일 디스크립터, 실패 시 -1 반환.
path:파일 이름을 나타내는 문자열의 주소값 전달.
flag:파일의 오픈 모드 정보 전달.
하나 이상의 정보를 비트 OR 연산자로 묶어서 전달 가능.
오픈 모드  의미
O_CREAT  필요하면 파일을 생성
O_TRUNC   기존 데이터 전부 삭제
O_APPEND  기존 데이터 보존하고, 뒤에 이어서 저장
O_RDONLY  읽기 전용으로 파일 오픈
O_WRONLY  쓰기 전용으로 파일 오픈
O_RDWR    읽기, 쓰기 겸용으로 파일 오픈

파일 닫기
파일은 사용 후 반드시 닫아줘야 한다.
#include <unistd.h>
int close(int fd); // 성공 시 0, 실패 시 -1 반환.
fd:닫고자 하는 파일 또는 소켓의 파일 디스크립터 전달.

파일에 데이터 쓰기
write 함수는 파일에 데이터를 출력(전송)하는 함수다.
#include <unisted.h>
ssize_t write(int fd, const void* fub, size_t nbytes); // 성공 시 전달한 바이트 수, 실패 시 -1 반환
fd:데이터 전송대상을 나타내는 파일 디스크립터 전달.
buf:전송할 데이터가 저장된 버퍼의 주소 값 전달.
nbytes:전송할 데이터의 바이트 수 전달.
size_t는 unsigned int로 정의. ssize_t는 signed int로 정의.
low_open.c

_t로 끝나는 자료형
primitive 자료형으로 sys/types.h 헤더파일에 typedef 선언을 통해서 정의되어 있다.
int가 지금은 32비트지만 과거에는 16비트.
시스템의 차이, 시간의 흐름에 따라서 자료형의 표현 방식이 달라지기 때문에 프로그램 상에서 선택된 자료형의 변경이 요구되기도 한다.
코드의 변경을 최소화할 수 있다. size_t, ssize_t의 typedef 선언만 변경해서 컴파일을 하면 된다.

파일에 저장된 데이터 읽기
read함수는 데이터를 입력(수신)하는 기능의 함수다.
#include <unisted.h>
ssize_t read(int fd, void* buf, size_t nbytes); // 성공 시 수신한 바이트 수(단 파일의 끝을 만나면 0), 실패 시 -1 반환
fd:데이터 수신대상을 나타내는 파일 디스크립터 전달.
buf:수신한 데이터를 저장할 버퍼의 주소 값 전달.
nbytes:수신할 최대 바이트 수 전달.
low_read.c

파일 디스크립터와 소켓
fd_seri.c
디스크립터는 일련의 순서대로 넘버링이 되는 것.
3부터 시작하는 이유는 0, 1, 2는 표준 입출력에 이미 할당.

01-3 윈도우 기반으로 구현하기
윈도우 소켓(윈속)은 상당부분 BSD 계열 유닉스 소켓을 참고하면 설계되었다.
리눅스 소켓과 유사하다.

리눅스와 윈도우 기반으로 동시에 공부해야 하는 이유
상당수의 프로젝트에서는 서버를 리눅스 계열의 운영체제 기반으로 개발한다.
클라이언트 프로그램은 윈도우 기반의 개발이 절대적.
변경해야 하는 상황도 종종 발생.
유사 부분을 묶어서 동시에 공부하는 것이 효과적.

윈도우 소켓을 위한 헤더와 라이브러리의 설정
기본적으로 두 가지를 진행해야 한다.
1. 헤더파일 winsock2.h를 포함한다.
2. ws2_32.lib 라이브러리를 링크시켜야 한다.

프로젝트 '속성' '구성 속성' -> '입력' -> '추가 종속성'

winsock의 초기화
윈속 프로그래밍을 할 때에는 반드시 WSAStartup 함수를 호출해서, 프로그램에서 요구하는
윈도우 소켓의 버전을 알리고, 해당 버전을 지원하는 라이브러리의 초기화 작업을 진행해야 한다.
#include <winsock.h>
int WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData); // 성공 시 0, 실패 시 0이 아닌 에러코드 값 반환.
wVersionRequested:프로그래머가 사용할 윈속의 버전정보 전달.
lpWSAData:WSADATA라는 구조체 변수의 주소 값 전달.

WORD는 unsigned short.
사용할 소켓의 버전이 1.2라면 1이 주 버전이고 2가 부 버전이므로 0x0201을 인자로 전달해야 한다.
상위 8비트에는 부 버전 정보를, 하위 8비트에는 주 버전 정보를 표시해서 인자로 전달.
우리는 2.2를 기반으로 프로그래밍.
매크로 함수인 MAKEWORD가 제공되고 있다.
MAKEWORD(1, 2); // 주 버전1, 부 버전2, 0x0201반환

LPWSADATA는 WSADATA의 포인터 형이다.
함수호출이 완료되고 난 다음에 해당 변수에는 초기화된 라이브러리의 정보가 채워진다.
함수호출을 위해서는 반드시 WSADATA 구조체 변수의 주소 값을 전달해야 한다.

윈속 기반의 거의 공식.
int main(int argc, char* argv[]) {
    WSADATA wsaData;
    ...
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
        ErrorHandling("WSAStartup() error!");
    ...
    return 0;
}

초기화된 라이브러리의 해제 방법.
#include <winsock2.h>
int WSACleanup(void); // 성공 시 0, 실패 시 SOCKET_ERROR 반환
호출하면, 할당된 윈속 라이브러리는 윈도우 운영체제에 반환이 되면서, 윈속관련 함수의 호출이 불가능해진다.
더 이상 윈속관련 함수의 호출이 불필요할 때, 위 함수를 호출하는 것이 원칙이나 프로그램이 종료되기 직전에 호출하는 것이 보통.

01-4 윈도우 기반의 소켓관련 함수와 예제
윈도우 기반 소켓관련 함수들
리눅스의 socket 함수와 동일한 기능을 제공.
#include <winsock2.h>
SOCKET socket(int af, int type, int protocol); // 성공 시 소켓 핸들, 실패 시 INVALID_SOCKET 반환

리눅스의 bind 함수와 동일한 기능을 제공.
IP주소와 PORT번호의 할당을 목적으로 호출되는 함수
#include <winsock2.h>
int bind(SOCKET s, const struct sockaddr* name, int namelen); // 성공 시 0, 실패 시 SOCKET_ERROR 반환

리눅스의 listen 함수와 동일한 기능을 제공.
소켓이 클라이언트 프로그램의 연결 요청을 받아들일 수 있는 상태가 되게 하는 것을 목적으로 호출하는 함수
#include <winsock2.h>
int listen(SOCKET s int backlog); // 성공 시 0, 실패 시 SOCET_ERROR 반환

리눅스의 accept 함수와 동일한 기능을 제공.
클라이언트 프로그램에서의 연결요청을 수락할 때 호출하는 함수
#include <winsock2.h>
SOCKET accept(SOCKET s, struct sockaddr* addr, int* addrlen); // 성공 시 소켓 핸들, 실패 시 INVALID_SOCKET 반환

리눅스의 connect 함수와 동일한 기능을 제공.
클라이언트 프로그램에서 소켓을 기반으로 연결요청을 할 때 호출하는 함수
#include <winsock2.h>
int connect(SOCKET s, const struct sockaddr* name, int namelen); // 성공 시 0, 실패 시 SOCKET_ERROR 반환

소켓을 닫을 때 호출하는 함수.
#include <winsock2.h>
int closesocket(SOCKET s); // 성공 시 0, 실패 시 SOCKET_ERROR 반환

윈도우에서의 파일 핸들과 소켓 핸들
윈도우에서는 파일 핸들과 소켓 핸들을 구분하고 있다.
SOCKET은 정수로 표현되는 소켓의 핸들 값 저장을 위해서 typedef 선언으로 정의된 새로운 자료형의 이름.

윈도우 기반 서버, 클라이언트 예제의 작성
hello_server_win.c
hello_client_win.c
서버 프로그램의 accept 함수가 호출되면서 멈춘 것.

윈도우 기반 입출력 함수
#include <winsock2.h>
int send(SOCKET s, const char* buf, int len, int flags); // 성공 시 전송된 바이트 수, 실패 시 SOCKET_ERROR 반환
s:데이터 전송 대상과의 연결을 의미하는 소켓의 핸들 값 전달.
buf:전송할 데이터를 저장하고 있는 버퍼의 주소 값 전달.
len:전송할 바이트 수 전달.
flags:데이터 전송 시 적용할 다양한 옵션 정보 전달.
flags는 일단 0을 전달.

#inclue <winsock2.h>
int recv(SOCKET s, const char* buf, int len, int flags); // 성공 시 수신한 바이트 수(EOF 전송 시 0), 실패 시 SOCKET_ERROR 반환
s:데이터 수신 대상과의 연결을 의미하는 소켓의 핸들 값 전달.
buf:수신된 데이터를 저장할 버퍼의 주소 값 전달.
len:수신할 수 있는 최대 바이트 수 전달.
flags:데이터 수신 시 적용할 다양한 옵션 정보 전달.
리눅스에도 send, recv가 있다. 그리고 이들이 write, read와 완전히 대응되진 않는다.