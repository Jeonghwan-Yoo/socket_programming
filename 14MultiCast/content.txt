다수의 클라이언트에게 동일한 데이터를 전송하는 일 조차 서버와 네트워크의 트래픽 측면에서는 매우 부정적.
멀티캐스트라는 기술이 존재.

14-1 Multicast
멀티캐스트 방식의 데이터 전송은 UDP를 기반으로 한다.
UDP에서의 데이터 전송은 하나의 목적지를 두고 이뤄지지만 멀티캐스트에서의 데이터 전송은 특정 그룹에 가입되어 있는 다수의 호스트가 된다.
멀티캐스트 방식을 이용하면 단 한번에 데이터 전송으로 다수의 호스트에게 데이터를 전송할 수 있다.

멀티캐스트의 데이터 전송방식과 멀티캐스트 트래픽 이점
1. 멀티캐스트 서버는 특정 멀티캐스트 그룹을 대상으로 데이터를 딱 한번 전송한다.
2. 한번 전송하더라도 그룹에 속하는 클라이언트는 모두 데이터를 수신한다.
3. 멀티캐스트 그룹의 수는 IP주소 범위 내에서 얼마든지 추가가 가능하다.
4. 특정 멀티캐스트 그룹으로 전송되는 데이터를 수시낳려면 해당 그룹에 가입하면 된다.
멀티캐스트 그룹이란 클래스 D에 속하는 IP주소(224.0.0.0~239.255.255.255)이다.
멀티캐스트 그룹에 가입을 한다는 것은 클래스 D에 속하는 IP주소 중에서 특정 목적지로 전송되는 멀티캐스트 데이터를 수신하겠다.
일반적인 UDP 패킷과 달리 하나의 패킷만 네트워크상에 띄워 놓으면 라우터들은 이 패킷을 복사해서 다수의 호스트에 이를 전달.
send to group AAA -> Router -> Router -> Group AAA join
하나의 영역에 동일한 패킷이 둘 이상 전송되지 않는다.
1000개의 호스트를 묶고 있는 라우터가 1000개의 호스트에게 파일을 복사해주니 한번만 전송하면 된다.
그래서 멀티캐스트 방식의 데이터 전송은 멀티미디어 데이터의 실시간 전송에 주로 사용.
아직도 적지 않은 수의 라우터가 멀티캐스트를 지원하지 않거나 지원하더라도 네트워크의 불필요한 트래픽 문제를 고려해서 일부러 막아 놓은 경우가 많다.
그래서 멀티캐스트를 지원하지 않는 라우터를 거쳐서 멀티캐스트 패킷을 전송하기 위한 Tunneling 기술도 사용된다.

Routing과 Time to Live, 그리고 그룹으로의 가입방법
멀티캐스트 패킷의 전송을 위해서는 TTL이라는 것의 설정과정을 반드시 거쳐야 한다.
TTL은 패킷을 얼마나 멀리 전달할 것인가를 결정하는 주 요소.
TTL은 정수로 표현되며, 라우터를 하나 거칠 때마다 1씩 감소.
이 값이 0이 되면 패킷은 더 이상 전달되지 못하고 소멸.
TTL을 너무 크게 설정하면 네트워크 트래픽에 좋지 못한 영향을 줄 수 있다.
너무 적게 설정해도 목적지에 도달하지 않는다.
TTL설정은 소켓의 옵션설정을 통해 이뤄진다.
TTL의 설정과 관련된 프로토콜의 레벨은 IPPROTO_IP이고 옵션의 이름은 IP_MULTICAST_TTL이다.
int send_sock;
int time_live = 64;
send_sock = socket(PF_INET, SOCK_DGRAM, 0);
setsockopt(send_sock, IPPROTO_IP, IP_MULTICAST_TTL, (void*)&time_live, sizeof(time_live));
멀티캐스트 그룹으로의 가입 역시 소켓의 옵션설정을 통해 이뤄진다.
그룹 가입과 관련된 프로토콜의 레벨은 IPPROTO_IP이고, 옵션의 이름은 IP_ADD_MEMBERSHIP이다.
int recv_sock;
struct ip_mreq join_adr;
recv_sock = socket(PF_INET, SOCK_DGRAM, 0);
join_adr.imr_multiaddr.s_addr = 멀티캐스트 그룹의 주소 정보;
join_adr.imr_interface.s_addr = 그룹에 가입할 호스트의 주소정보;
setsockopt(recv_sock, IPPROTO_IP, IP_ADD_MEMBERSHIP, (void*)&join_adr, sizeof(join_adr));
struct ip_mreq {
    struct in_addr imr_multiaddr;
    struct in_addr imr_interface;
};
imr_multiaddr에는 가입할 그룹의 IP주소를 채워 넣는다.
imr_interface에는 그룹에 가입하는 소켓이 속한 호스트의 IP주소를 명시하는데 INADDR_ANY를 이용하는 것도 가능하다.

멀티캐스트 Sender와 Receiver의 구현
sender는 멀티캐스트 데이터의 전송주체. 파일에 저장된 정보를 AAA그룹으로 방송한다.
receiver는 멀티캐스트 그룹의 가입과정이 필요한 데이터의 수신주체. AAA그룹으로 전송된 정보를 수신한다.
receiver는 그룹의 가입과정이 필요하지만, sender는 UDP 소켓을 생성하고 멀티캐스트 주소로 데이터를 전송만하면 된다.
news_sender.c
임의의 멀티캐스트 주소로 전송되는 데이터의 수신을 위해서 가입이라는 과정을 거친다.
news_receiver.c
sender와 receiver의 port 번호도 일치시켜야 한다.
실행의 순서는 중요하지 않다. TCP 소켓처럼 연결된 상태에세 데이터를 송수신하는 것이 아니기 때문.
Receiver를 늦게 실행하면, 그 이전에 전송된 멀티캐스트 데이터는 수신이 불가능하다.

MBone(Multicast Backbone)
멀티캐스트는 MBone이라 불리는 가상 네트워크를 기반으로 동작한다.
이는 인터넷상에서 별도의 프로토콜을 기반으로 동작하는, 소프트웨어적인 개념의 네트워크.
MBone은 손으로 만질 수 있는 물리적인 개념의 네트워크가 아니다.
멀티캐스트에 필요한 네트워크 구조를 인터넷 망을 바탕으로 소프트웨어적으로 구현해 놓은 가상의 네트워크.

14-2 Broadcast

