웹의 발전은 유닉스 게열의 운영체제에서도 쓰레드의 중요성을 부각시켰다.
웹 기반의 서버에서는 프로토콜의 특성상 둘 이상의 클라이언트에게 동시에 서비스를 제공해야 하는 경우가 많다.
상대적으로 프로세스보다 효율적인 쓰레드를 서버구현에 적용한다.

18-1 쓰레드의 이론적 이해
쓰레드의 등장 배경
프로세스의 생성은 select나 epoll에 비해서 확실히 구분되는 장점이 있다.
프로세스의 생성(복사) 작업자체가 운영체제 차원에서 상당히 부담되는 작업이다.
뿐만 아니라, 프로세스마다 완전히 독립된 메모리 공간을 유지하기 때문에 프로세스 사이에서 메시지를 주고받아야 하는 경우에는 그만큼 구현의 어려움.
1. 프로세스 생성이라는 부담스러운 작업과정을 거친다.
2. 두 프로세스 사이에서의 데이터 교환을 위해서는 별도의 IPC 기법을 적용해야 한다.
3. 초당 적게는 수십 번에서 많게는 수천 번까지 일어나는 Context Switching에 따른 부담은 프로세스 생성방식의 가장 큰 부담.
실행중인 둘 이상의 프로세스들이 CPU의 할당시간을 매우 작은 크기로 쪼개서 서로 나눈다.
그런데 CPU의 할당시간을 나누기 위해서는 컨텍스트 스위칭이라는 과정을 거쳐야 한다.
프로그램의 실행을 위해서는 해당 프로세스의 정보가 메인 메모리에 올라와야 한다.
현재 실행중인 A 프로세스의 뒤를 이어서 B 프로세스를 실행시키려면 A 프로세스 관련 데이터를 메인 메모리에서 내리고 B 프로세스 관련 데이터를 메인 메모리로 이동시켜야 한다.
이것이 컨텍스트 스위칭이다.
이 때 A 프로세스 관련 데이터는 하드디스크로 이동하기 때문에 컨텍스트 스위칭에는 오랜 시간이 걸리고, 빨리 진행한다하더라도 한계가 있다.

컨텍스트 스위칭
CPU 내부에 존재하는 레지스터 중심으로 설명이 진행되어야 한다.

Thread는 멀티프로세스의 여러 가지 단점을 최소화하기 위해서 설계된 일종의 경량화된 프로세스이다.
1. 쓰레드의 생성 및 컨텍스트 스위칭은 프로세스의 생성 및 컨텍스트 스위칭보다 빠르다.
2. 쓰레드 사이에서의 데이터 교환에는 특별한 기법이 필요치 않다.

쓰레드와 프로세스의 차이점
둘 이상의 실행흐름을 갖기 위해서 프로세스가 유지하고 있는 메모리 영역을 통째로 복사한다는 것은 부담스럽다.
프로세스의 메모리 구조는 전역변수가 할당되는 데이터 영역, malloc 함수 등에 의해 동적 할당이 이뤄지는 Heap, 함수의 실행에 사용되는 Stack으로 이뤄진다.
그런데 프로세스들은 이를 완전히 별도로 유지한다.
|Process A|  |Process B|  |Process C|
|데이터   |  |데이터    |  |데이터   |
|힙       |  |힙       |   |힙      |
|스택     |  |스택     |   |스택     |
그런데 둘 이상의 실행흐름을 갖는 것이 목적이라면, 완전히 메모리 구조를 분리시킬 것이 아니라, 스택 영역만을 분리시킴으로써 장점을 얻을 수 있다.
1. 컨텍스트 스위칭 시 데이터 영역과 힙은 올리고 내릴 필요가 없다.
2. 데이터 영역과 힙을 이용해서 데이터를 교환할 수 있다.
그래서 등장한 것이 쓰레드이며, 모든 쓰레드는 별도의 실행흐름을 유지하기 위해서 스택 영역만 독립적으로 유지한다.
Process
|Thread A|  |Thread B|  |Thread C|
|A 스택  |  |B 스택  |   |C 스택  |
|        공유 데이터 영역         |
|          공유 힙 영역           |
데이터 영역과 힙 영역을 공유하는 구조로 쓰레드는 설계되어 있다.
이를 위해 쓰레드는 프로세스 내에서 생성 및 실행되는 구조로 완성.
프로세스:운영체제 관점에서 별도의 실행흐름을 구성하는 단위
쓰레드:프로세스 관점에서 별도의 실행흐름을 구성하는 단위
Operating System
Process A  Process B  ...
Thread A1  Thread B1
Thread A2  Thread B2
...

18-2 쓰레드의 생성 및 실행


