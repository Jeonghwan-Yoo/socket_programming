05-1 에코 클라이언트의 완벽 구현
에코 서버는 문제가 없고, 에코 클라이언트만 문제가 있나요?
문제는 에코 서버에 있지 않고, 에코 클라이언트에 있다.
입출력에 사용된 함수의 호출문이 동일하기 때문.
서버
while((str_len=read(clnt_sock, message, BUF_SIZE)) != 0)
    wrtie(clnt_sock, message, str_len);
클라이언트
write(sock, message, strlen(message));
str_len = read(sock, message, BUF_SIZE - 1);
에코 클라이언트는 자신이 서버로 전송한 데이터를 100% 수신한다.
다만 수신하는 단위에 문제가 있을 뿐.
에코 클라이언트는 문자열을 전송한다.
wrtie 함수호출을 통해 한방에 전송한다.
그리고 read 함수호출을 통해서 자신이 전송한 문자열 데이터를 한방에 수신하기를 원한다.
시간이 좀 지나면 수신할 수 있지만 원래 클라이언트는 문자열 데이터가 전송되었을 때 이를 모두 읽어서 출력해야 한다.

에코 클라이언트의 해결책!
클라이언트가 수신해야 할 데이터의 크기를 미리 알고 있기에 해결하기 쉽다.
20바이트인 문자열을 전송했다면, 20바이트를 수신할 때까지 반복해서 read 함수를 호출하면 된다.
echo_client2.c
read 함수를 전송한 데이터의 크기만큼 수신하기 위해 반복호출.
while (recv_len != str_len) {}은 혹시라도 오류가 발생해 recv_len 값이 str_len을 초과하면 빠져나가지 못한다.
반복문을 구성할 때에는 예측하지 못한 상황에 따른 무한루프의 형성 가능성을 최소화하는 것이 좋다.

에코 클라이언트 이외의 경우에는? 어플리케이션 프로토콜의 정의
에코 클라이언트의 경우에는 수신할 데이터의 크기를 이전에 파악할 수 있지만, 이것이 불가능한 경우가 훨씬 많다.
이러한 경우에 필요한 것이 어플리케이션 프로토콜의 정의이다.
데이터의 송수신 과정에서도 데이터의 끝을 파악할 수 있는 약속을 별도로 정의해서 데이터의 끝을 표현하거나,
송수신될 데이터의 크기를 미리 알려줘서 그에 따른 대비가 가능해야 한다.
서버, 클라이언트의 구현과정에서 만들어지는 약속을 어플리케이션 프로토콜.
목적에 맞는 프로그램의 구현에 따라서 정의하게 되는 약속이다.
연산은 클라이언트가 아닌 서버가 진행하며, 클라이언트는 단순히 출력.

계산기 서버, 클라이언트의 예
실제 프로그램의 구현을 위해서는 보다 자세하고 정확한 프로토콜이 정의되어야 한다.
네트워크 프로그래밍에서는 어플리케이션 프로토콜의 정의가 중요하다.
close 함수가 호출되면 상대방에게 EOF가 전달된다.
op_client.c
하나의 배열에 다양한 종류의 데이터를 저장해서 전송하려면, char형 배열을 선언해야 한다.
op_sever.c

05-2 TCP의 이론적인 이야기!
TCP 소켓에 존재하는 입출력 버퍼
write 함수가 호출되는 순간이 데이터가 전송되는 순간이 아니고, read 함수가 호출되는 순간이 데이터가 수신되는 순간이 아니다.
write 함수가 호출되는 순간 데이터는 출력버퍼로 이동을 하고, read 함수가 호출되는 순간 입력버퍼에 저장된 데이터를 읽어 들이게 된다.
wrtie 함수가 호출되면 출력버퍼라는 곳에 데이터가 전달되어서 상황에 맞게 적절히 데이터를 상대방의 입력버퍼로 전송한다.
상대방은 read 함수호출을 통해 입력버퍼에 저장된 데이터를 읽게 되는 것.
1. 입출력 버퍼는 TCP 소켓 각각에 대해 별도로 존재한다.
2. 입출력 버퍼는 소켓생성시 자동으로 생성된다.
3. 소켓을 닫아도 출력 버퍼에 남아있는 데이터는 계속해서 전송이 이뤄진다.
4. 소켓을 닫으면 입력버퍼에 남아있는 데이터는 소멸되어버린다.
입력버퍼의 크기를 초과하는 분량의 데이터 전송은 발생하지 않는다.
TCP가 데이터의 흐름까지 컨트롤하기 때문.
TCP에는 Sliding Window라는 프로토콜이 존재한다.
내가 20바이트 비웠으니까 70바이트까지 괜찮아

write 함수가 반환되는 시점
반환되는 시점은 전송할 데이터가 출력버퍼로 이동이 완료되는 시점이다.
TCP의 경우는 출력버퍼로 이동된 데이터의 전송을 보장하기에 write 함수는 데이터의 전송이 완료되어야 반환이 가능하다고도 할 수 있는 것.

TCP의 내부 동작원리1:상대 소켓과의 연결
TCP 소켓의 생성에서 소멸의 과정까지 거치게 되는 일을 크게 나누면
1. 상대 소켓과의 연결
2. 상대 소켓과의 데이터 송수신
3. 상대 소켓과의 연결종료

연결설정 과정에서 두 소켓이 주고받는 대화내용
내가 전달할 데이터가 있으니 연결하자
나도 준비 됐으니 언제든지 시작해
내 요청을 들어줘서 고마워
Three-way handshaking이라 한다.

호스트 A     호스트 B
-------------------> [SYN] SEQ:1000 ACK:-
<------------------- [SYN+ACK] SEQ:2000 ACK:1001
-------------------> [ACK] SEQ:1001 ACK:2001
소켓은 Full-duplex 방식으로 동작하므로 양방향으로 데이터를 주고받을 수 있다.
송수신에 앞서 준비과정이 필요하다.
[SYN] SEQ:1000, ACK:-
지금 보내는 이 패킷에 1000이라는 번호를 부여하니 잘 받았으면 다음에는 1001번 패킷을 전달해줘
처음 연결 요청에 사용되는 메시지이기 때문에 SYN라고 한다.
데이터 송수신에 앞서 전송되는 동기화 메시지이다.
[SYN+ACK] SEQ:2000, ACK:1001
이 패킷에 2000이라는 번호를 부여하니, 잘 받았으면 다음에는 2001번 패킷을 전달해줘.
SEQ가 1000인 패킷은 잘 받았읜, 다음 번에는 SEQ가 1001인 패킷을 전송해줘.
응답 메시지(ACK)와 동기화 메시지(SEQ)를 함께 묶어서 보내고 있다. 이러한 유형의 메시지를 SYN+ACK
[ACK] SEQ:1001, ACK:2001
이렇게 상호간에 데이터 송수신을 위한 준비가 모두 되었다.

TCP의 내부 동작원리2:상대 소켓과의 데이터 송수신
호스트 A     호스트 B
-------------------> SEQ:1200 100bytes
<------------------- ACK:1301
-------------------> SEQ:1301 100bytes
<------------------- ACK:1402
ACK 번호를 전송된 바이트 크기만큼 추가로 증가시켰기 때문이다.
그래야 일부가 손실되었는지 확인할 수 있다.
ACK 번호 = SEQ 번호 + 전송된 바이트 크기 + 1
1을 더한 이유는 다음 번에 전달될 SEQ의 번호를 알리기 위함.

호스트 A     호스트 B
-------------------> SEQ:1200 100bytes
<------------------- ACK:1301
-------------------> SEQ:1301 100bytes
timeout
-------------------> SEQ:1301 100bytes
<------------------- ACK:1402
중간에 문제가 발생해서 호스트 B에 전송되지 못했다.
호스트 A는 일정시간이 지나도 SEQ 1301에 대한 ACK 메시지를 받지 못하기 때문에 재전송을 진행한다.
데이터의 손실에 대한 재전송을 위해서 TCP 소켓은 ACK 응답을 요구하는 패킷 전송 시케 타이머를 동작시킨다.
해당 타이머가 time-out되었을 때 패킷을 재전송한다.

TCP의 내부 동작원리3:상대 소켓과의 연결종료
그냥 연결을 뚝 끊어버리면, 상대방이 전송할 데이터가 남아있을 때 문제가 되기 때문에 상호간에 연결종료의 합의과정을 거치게 된다.
연결을 끊고자 합니다.
잠시만요
저도 준비가 끝났습니다. 끊으세요
알겠습니다.
소켓 A가 종료 메시지를 소켓 B에게 전달하고, 소켓 B는 해당 메시지의 수신을 소켓 A에게 알린다.
이어서 소켓 B가 종료 메시지를 소켓 A에게 전달하고, 소켓 A는 해당 메시지의 수신을 소켓 B에게 알리며 종료의 과정을 마치게 된다.
호스트 A     호스트 B
-------------------> [FIN] SEQ:5000 ACK:-
<------------------- [ACK] SEQ:7500 ACK:5001
<------------------- [FIN] SEQ:7501 ACK:5001
-------------------> [ACK] SEQ:5001 ACK:7502
패킷 안에 삽입되어 있는 FIN은 종료를 알리는 메시지를 뜻한다.
상호 간에 FIN 메시지를 한번씩 주고 받고서 연결이 종료되는데, 네 단계에 걸쳐서 진행되기에 Four-way handshaking.
FIN 메시지에 포함된 ACK 5001는 앞서 전송한 ACK 메시지가 수신된 이후로 데이터 수신이 없었기 때문에 재전송된 것.
지금까지 TCP 프로콜의 기본이 되는 TCP Flow Control이었다.

05-3 윈도우 기반으로 구현하기
op_client_win.c
op_server_win.c