02-1 소켓의 프로토콜과 그에 따른 데이터 전송 특성
Protocol이란 무엇인가?
컴퓨터 상호간의 대화에 필요한 통신규약.
서로 데이터를 주고 받기 위해서 정의해 놓은 약속.

소켓의 생성
#include <sys/socket.h>
int socket(int domain, int type, int protocol); // 성공 시 파일 디스크립터, 실패 시 -1 반환
domain:소켓이 사용할 프로토콜 체계(Protocol Family) 정보 전달.
type:소켓의 데이터 전송방식에 대한 정보 전달.
protocol:두 컴퓨터간 통신에 사용되는 프로토콜 정보 전달.

Protocol Family
이름      프로토콜 체계
PF_INET   IPv4 인터넷 프로토콜 체계
PF_INET6  IPv6 인터넷 프로토콜 체계
PF_LOCAL  로컬 통신을 위한 UNIX 프로토콜 체계
PF_PACKET Low Level 소켓을 위한 프로토콜 체계
PF_IPX    IPX 노벨 프로토콜 체계

실제 소켓이 사용할 최종 프로토콜 정보는 socket 함수의 세번째 인자를 통해서 전달하게 되어있다.
첫 번째 인자를 통해서 지정한 프로토콜 체계의 범위 내에서 세 번째 인자가 결정되어야 한다.

소켓의 Type
소켓의 데이터 전송방식. socket의 두 번째 인자로 전달.
PF_INET에 해당하는 프로토콜 체계에도 둘 이상의 데이터 전송방식이 존재한다.

소켓의 타입1:연결지향형 소켓(SOCK_STREAM) 공장 라인
1. 중간에 데이터가 소멸되지 않고 목적지로 전송된다.
2. 전송 순서대로 데이터가 수신된다.
3. 전송되는 데이터의 경계가 존재하지 않는다.
독립된 별도의 전송라인을 통해서 데이터를 전달하기 때문에 라인이 문제 없다면 소멸되지 않고 순서대로 수신.
데이터를 송수신하는 소켓은 내부적으로 buffer인 바이트 배열을 지니고 있다.
소켓을 통해 전송되는 데이터는 일단 이 배열에 저장된다.
데이터가 수신되었다고 해서 바로 read 함수를 호출해야 하는 것은 아니다.
용량을 초과하지 않는 한, 데이터가 채워진 후에 한 번의 read 함수호출을 통해서 데이터 전부를 읽어 들일 수도 있고,
한번의 write 함수호출로 전송된 데이터 전부를 여러 번의 read 함수 호출을 통해 읽어 들일 수도 있다.
read 함수의 호출횟수와 write 함수의 호출횟수는 연결지향형 소켓의 경우 큰 의미를 갖지 못한다.
그러기에 데이터의 경계가 존재하지 않는다.

소켓에 존재하는 버퍼가 꽉 차면 데이터가 소멸되나요?
버퍼에 수신된 데이터는 read 함수호출을 통해서 데이터가 읽혀지면 읽혀진 만큼 버퍼에서 비워지게 된다.
많은 양의 데이터가 수신되면 버퍼도 꽉 찰 수 있고 이 소켓은 더 이상 데이터를 수신할 수 없다.
그래도 데이터를 전송하는 영역의 소켓이 더 이상 데이터를 전송하지 않기에 데이터가 소멸되진 않는다.
연결지향형 소켓은 자신과 연결된 상대 소켓의 상태를 파악해가면서 데이터를 전송한다.
데이터가 제대로 전송되지 않으면 데이터를 재전송하기까지 한다.
특별한 경우가 아니면 데이터 손실은 발생하지 않는다.

소켓 대 소켓의 연결은 반드시 1대1이어야 한다.
연결지향형 소켓 하나는 다른 연결지향형 소켓 하나와만 연결이 가능하다.
즉, 신뢰성 있는 순차적인 바이트 기반의 연결지향 데이터 전송 방식의 소켓

소켓의 타입2:비 연결지향형 소켓(SOCK_DGRAM) 택배
1. 전송된 순서에 상관없이 가장 빠른 전송을 지향한다.
2. 전송된 데이터는 손실의 우려가 있고, 파손의 우려가 있다.
3. 전송되는 데이터의 경계가 존재한다.
4. 한번에 전송할 수 있는 데이터의 크기가 제한된다.
경계가 존재한다는 의미는 데이터를 전송할 때 두 번의 함수 호출이 수반되었다면, 데이터를 수신할 때에도 두 번의 함수 호출이 수반되어야 한다.
즉, 신뢰성과 순차적 데이터 전송을 보장하지 않는, 고속의 데이터 전송을 목적으로 하는 소켓.

프로토콜의 최종선택
최종적으로 소켓이 사용하게 될 프로토콜 정보를 전달하는 목적.
세 번째 인자로 그냥 0을 넘겨줘도 우리가 원하는 소켓을 생성할 수 있다.
하지만 하나의 프로토콜 체계 안에 데이터의 전송방식이 동일한 프로토콜이 둘 이상 존재하는 경우
즉, 소켓의 데이터 전송방식은 같지만, 그 안에서도 프로토콜이 다시 나뉘는 상황이 존재.
이러한 경우에는 원하는 프로토콜 정보를 조금 더 구체화.
IPv4 인터넷 프로토콜 체계에서 동작하는 연결지향형 데이터 전송 소켓은 TCP하나이다.
int tcp_socket = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
IPv4 인터넷 프로토콜 체게에서 동작하는 비 연결지향형 데이터 전송 소켓은 UDP하나이다.
int udp_socket = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);

연결지향형 소켓! TCP 소켓의 예
write 함수의 호출횟수와 read 함수의 호출횟수를 불일치 시켜본다.
tcp_server.c
tcp_clinet.c

02-2 윈도우 기반에서 이해 및 확인하기
윈도우 운영체제의 socket 함수
#include <winsock2.h>
SOCKET socket(int af, int type, int protocol); // 성공 시 소켓 핸들, 실패 시 INVALID_SOCKET 반환
SOCKET은 정수로 표현되는 소켓의 핸들 값을 저장하기 위해 정의된 자료형의 이름.
함수가 반환하는 값은 SOCKET형 변수를 하나 선언해서 저장해야 한다.
INVALID_SOCKET은 오류발생을 알리는 상수이고 -1이다.

윈도우 기반 TCP 소켓의 예
tcp_server_win.c
tcp_client_win.c

