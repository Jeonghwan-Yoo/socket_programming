윈도우 기반 IO 모델 중에서 가장 성능이 우수.

23-1 Overlapped IO를 기반으로 IOCP 이해하기
논의가 한참인 epoll과 IOCP의 성능비교
select와 같은 전통적인 IO 모델의 한계극복을 목적으로, 운영체제 레벨(커널 레벨)에서 성능을 향상시킨 IO모델이 운영체제 별로 등장하였다.
대표적인 것이 리눅스의 epoll, BSD의 kqueue 그리고 윈도우의 IOCP이다.
공통적인 특성은 운영체제에 의해서 기능이 지원 및 완성된다는 것.
서버의 응답시간과 동시접속자 수는 매우 중요한 요소이다.
하드웨어의 성능이나, 할당된 대역폭이 충분한 상황에서 응답시간이나, 동시접속자 수에 문제가 발생하면 이 둘을 수정함으로써 대부분의 문제를 해결한다.
1. 비효율적인 IO의 구성 또는 비효율적인 CPU의 활용
2. 데이터베이스의 설계내용과 Query의 구성
다른 IO 모델에 없는 장점이 IOCP에 있긴 하지만, 서버의 성능을 좌우하는 절대적 기준은 아니며, 모든 상황에서 부각되는 것도 아니다.
이들의 성능을 좌우하는 것은 운영체제의 내부 동작방식에 있기도 하다.

넌-블로킹 모드의 소켓 구성하기
윈도우에서는 다음의 함수호출을 통해서 넌-블로킹 소켓의 속성을 변경한다.
SOCKET hLisnSock;
int mode = 1;
...
hLisㄴㄷnSock = WSASocket(PF_INET, SOCK_STREAM, 0, NULL, WSA_FLAG_OVERLAPPED);
ioctlsocket(hLisnSock, FIONBIO, &mode); // for non-blocking SOCKET
...
ioctlsocket함수는 소켓의 IO방식을 컨트롤하는 함수이다.
의미하는 바는 핸들 hLisnSock이 참조하는 소켓의 입출력 모드(FIONBIO)를 변수 mode에 저장된 값의 형태로 변경한다.
세 번째 인자로 전달된 주소 값의 변수에 0이 저장되어 있으면 블로킹 모드로, 0이 아닌 값이 저장되어 있으면 넌-블로킹 모드로 소켓의 입출력 속성을 변경한다.
속성이 넌-블로킹 모드로 변경되면, 넌-블로킹 모드로 입출력되는 것 이외의 다음의 특징도 지니게 된다.
1. 클라이언트의 연결요청이 존재하지 않는 상태에서 accept 함수가 호출되면 INVALID_SOCKET이 곧바로 반환된다.
그리고 이어서 WSAGetLastError 함수를 호출하면 WSAEWOULDBLOCK가 반환된다.
2. accept 함수호출을 통해서 새로 생성되는 소켓 역시 넌-블로킹 속성을 지닌다.
따라서 넌-블로킹 입출력 소켓을 대상으로 accept 함수를 호출해서 INVALID_SOCKET이 반환되면, WSAGetLastError함수의 호출을 통해서 
INVALID_SOCKET이 반환된 이유를 확인하고, 그레 적절한 처리를 해야만 한다.

Overlapped IO만 가지고 에코 서버 구현하기
넌-블로킹 소켓의 생성방법은 Overlapped IO기반의 서버구현에 필요하다.
Overlapped IO만 가지고 서버를 구현하는 경우는 매우 드물다.
IOCP를 정확히 이해하기 위해서는 Overlapped IO만 가지고 섭를 구현해 봐야 한다.
굳이 IOCP를 적용하지 않더라도, Overlapped IO만 가지고도 IOCP와 유사한 형태로 동작하는 서버를 구현할 수 있어야 한다.
그러면 다른 운영체제 기반에서도 IOCP와 유사한 방식으로 동좍하는 서버를 구현할 수 있고, 서버의 실제 기능 구현할 수 있다.
CmplRouEchoServ_win.c
구조체 변수에 담겨있는 정보만 참조해도 데이터의 송수신이 가능하도록 구조체를 정의.
클라이어트가 연결되면 WSARecv 함수를 호출하면서 넌-블로킹 모드로 데이터가 수신하게 되고, 수신이 완료되면 ReadCompRoutine 함수가 호출된다.
ReadCompRoutine 함수가 호출되면 WSASend 함수를 호출하면서 넌-블로킹 모드로 데이터가 송신되게 하고, 송신이 완료되면 WriteCompRoutine 함수가 호출되게 한다.
그런데 WrtieCompRoutine 함수는 다시 WSARecv 함수를 호출하면서 넌-블로킹모드로 데이터의 수신을 기다린다.
ReadCompRoutine함수와 WriteCompRoutine 함수가 번갈아 호출되면서 데이터의 수신과 송신을 반복하도록 구성하였다.
클라이언트가 하나 늘때마다 추가로 생성도는 소켓의 핸들과 버퍼 정보를 ReadCompRoutine 함수와 WriteCompRoutine 함수에 전달하기 위해서 PER_IO_DATA 구조체를 정의,
이 구조체의 변수의 주소 값은 WSAOVERLAPPED 구조체의 멤버 hEvent에 저장되어 Completion Routine 함수에 전달되게끔 하였다.
입출력 완료 시 자동으로 호출되는 Completion Routine 내부로 클라이언트 정보(소켓과 버퍼)를 전달하기 위해서 WSAOVERLAPPED 구조체 멤버 hEvent를 사용하였다.

클라이언트의 재구현
StableEchoClnt_win.c
TCP 전송특성을 고려해서 수신해야 할 데이터가 완전히 수신될 때까지 recv 함수를 호출하고 있다.

Overlapped IO 모델에서 IOCP 모델로
넌블로킹모드의 accept 함수와 alertable wait 상태로의 진입을 위한 SleepEx 함수가 번갈아 가며 반복호출되는 것은 성능에 영향을 줄 수 있다.
연결요청의 처리를 위한 accept함수만 호출할 수 있는 상황이 아니기 때문에, 그리고 Completion Routine 함수의 호출을 위해서 SleepEx 함수만 호출할 수 있는 상황도 아니기 때문에,
accept 함수는 넌블로킹모드로, SleepEx 함수는 타임아웃을 짧게 지정해서 돌아가며 반복 호출.
accept 함수의 호출은 main 쓰레드가(main 함수 내에서) 처리하도록 하고, 별도의 쓰레드를 추가로 하나 생성해서 클라이언트와의 입출력을 담당하게 할 수 있다.
이것이 IOCP에서 제안하는 서버의 구현 모델이다.
IOCP에서는 IO를 전달하는 쓰레드를 별도로 생성한다.
그리고 이 쓰레드가 모든 클라이언트를 대상으로 IO를 진행하게 된다.

IO를 전달한다는 것은
IOCP는 IO의 전달을 위해 최소 하나 이상의 쓰레드 생성을 요한다.
그런데 서버 프로그램에서 IO를 전담한다는 것은 실질적인 서버의 서비스 전부를 전담하는 것과 같다.
때문에 IO만 담당하는 것이 아니라, IO의 전후 과정을 전부 담당하는 쓰레드를 생성하는 것이다.
쓰레드의 생성보다는 다음 두 가지 관점에서 관찰
1. 입력과 출력인 넌-블로킹 모드로 동작하는거?
2. 넌-블로킹 모드로 진행된 입력과 출력의 완료는 어떻게 확인하는가?

23-2 IOCP의 단계적 구현
Completion Port의 생성
IOCP에서는 완료된 IO의 정보가 Completion Port 오브젝트(CP)라는 커널 오브젝트에 등록된다.
그런데 그냥 등록되는 것이 아니기 때문에 다음과 같은 요청의 과정이 선행되어야 한다.
이 소켓을 기반으로 진행되는 IO의 완료 상황은 CP 오브젝트에 등록해주세요.
이를 소켓과 CP오브젝트와의 연결 요청이라 한다.
IOCP 모델의 서버 구현을 위해서는 Completion Port 오브젝트의 생성을 해야하고, Completion Port 오브젝트와 소켓의 연결을 해야 한다.
이 소켓은 반드시 Overlapped 속성이 부여된 소켓이어야 하며, 하나의 함수를 통해서 이뤄진다.
#include <windows.h>
HANDLE CreateIoCompletionPort(HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
// 성공 시 CP 오브젝트의 핸들, 실패 시 NULL 반환
FileHandle:CP 오브젝트 생성시에는 INVALID_HANDLE_VALUE를 전달.
ExistingCompletionPort:CP 오브젝트 생성시에는 NULL 전달
CompletionKey:CP 오브젝트 생성시에는 0 전달
NumberOfConcurrentThreads:CP 오브젝트에 할당되어 완료된 IO를 처리할 쓰레드의 수를 전달.
2가 전달되면 CP 오브젝트에 할당되어 동시 실행 가능. 한 쓰레드의 수는 최대 2개로 제한된다.
이 인자에 0이 전달되면 시스템의 CPU 개수가 동시 실행 가능한 쓰레드의 최대수로 지정된다.
CP 오브젝트의 생성을 목적으로 호출할 때에는 마지막 매개변수만이 의미를 갖는다.
CP 오브젝트에 할당되어 IO를 처리할 쓰레드의 수를 2개로 지정할 경우
HANDLE hCpObject;
...
hCpObject = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 2);

Completion Port 오브젝트와 소켓의 연결
CP 오브젝트가 생성되었다면, 소켓과 연결시켜야 한다.
그래야 완료된 소켓의 IO정보가 CP 오브젝트에 등록된다.
#include <windows.h>
HANDLE CreateIoCompletionPort(HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
// 성공 시 CP 오브젝트의 핸들, 실패 시 NULL 반환
FileHandle:CP 오브젝트에 연결할 소켓의 핸들 전달.
ExistingCompletionPort:소켓과 연결할 CP 오브젝트의 핸들 전달
CompletionKey:완료된 IO 관련 정보의 전달을 위한 매개변수, GetQueuedCompletionStatus 함수와 함께.
NumberOfConcurrentThreads:어떠한 값을 전달하건, 이 함수의 두 번째 매개변수가 NULL이 아니면 무시된다.
매개변수 FileHandle에는 전달된 핻늘의 소켓을 매개변수 ExistingCompletionPort에 전달된 핸들의 CP 오브젝트에 연결시키는 것이 두 번째 기능.
HANDLE hCpObject;
SOCKET hSock;
...
CreateIoCompletionPort((HANDLE)hSock, hCpObject, (DWORD)ioInfo, 0);
CreateCompletionPort 함수가 호출된 이후부터는 hSock을 대상으로 진행된 IO가 완료되면, 이에 대한 정보가 핸들 hCpObject에 해당하는 CP 오브젝트에 등록된다.

Completion Port의 완료된 IO 확인과 쓰레드의 IO처리
CP에 등록되는 완료된 IO의 확인방법
#include <windows.h>
BOOL GetQueuedCompletionStatus(HANDLE CompletionPort, LPDWORD lpNumberOfBytes, PULONG_PTR lpCompletionKey, LPOVERLAPPED* lpOverlapped, DWORD dwMilliseconds);
// 성공 시 TRUE, 실패 시 FALSE 반환
CompletionPort:완료된 IO 정보가 등록되어 있는 CP 오브젝트의 핸들 전달.
lpNumberOfBytes:입출력 과정에서 송수신 된 데이터의 크기정보를 저장할 변수의 주소 값 전달.
lpCompletoinKey:CreateCompletionPort 함수의 세 번째 인자로 전달된 값의 저장을 위한 변수의 주소 값 전달.
lpOverlapped:WSASend, WSARecv 함수호출 시 전달하는 OVERLAPPED 구조체 변수의 주소 값이 저장될, 변수의 주소 값 전달.
dwMilliseconds:타임아웃 정보전달, 여기서 지정한 시간이 완료되면 FALSE를 반환하면서 함수를 빠져나가며,
INFINITE를 전달하면 완료된 IO가 CP 오브젝트에 등록될 때까지 블로킹 상태에 있게 된다.
GetQueuedCompletionStatus 함수의 세 번째 인자를 통해서 얻게 되는 것은 소켓과 CP 오브젝트의 연결을 목적으로 
CreateCompletionPort 함수가 호출될 때 전달되면 세 번째 인자 값이다.
GetQueuedCompletionStatus 함수의 네 번째 인자를 통해서 얻게 되는 것은 WSASend, WSARecv 함수호출 시 전달되는 WSAOVERLAPPED 구조체 변수의 주소 값이다.

이 함수는 IOCP의 완료된 IO 처리를 담당하는 쓰레드가 호출해야 한다.
IOCP에서는 IO를 전달하는 쓰레드를 별도로 생성하고, 이 쓰레드가 모든 클라이언트를 대상으로 IO를 진행하게 된다.
CreateCompletionPort 함수에는 생성되는 CP 오브젝트에 할당할 최대 쓰레드의 수를 지정하는 매개변수도 존재한다.
입출력 함수는 WSASend, WSARecv 함수를 호출하는 쓰레드는 직접 생성해야 한다.
다만 이 쓰레드가 입출력의 완료를 위해서 GetQueuedCompletionStatus 함수를 호출할 뿐이다.
그리고 GetQueuedCompletionStatus 함수는 어떠한 쓰레드라도 호출 가능하지만, 실제 IO의 완료에 대한 응답을 받는 쓰레드의 수는
CreateCompletionPort 함수호출 시 지정한 최대 스레드의 수를 넘지 않는다.

Completion Port에 할당할 쓰레드의 적정 개수는?
CP 오브젝트에 할당할 적정 쓰레드의 수는 컴퓨터의 CPU 수라도 MSDN에서 설명한다.
하지만 요즘 CPU는 내부적으로 연산기능을 갖춘 코어가 둘이상이다.
코어가 둘이면 동시에 두 개의 쓰레드를 실행시킬 수 있기 때문에 CP 오브젝트에 할당할 적정 쓰레드의 수는 컴퓨터의 CPU내에 존재하는 코어의 수로 이해하는 것이 좋다.
전문가가 아닌 경우에는 코어와 CPU를 동일시해서 얘기하기도 한다.
성능을 최대로 이끌어 낼 쓰레드의 수를 정확히 파악하고 싶다면, 실험적 결과를 통해서만 확인이 가능하다.
