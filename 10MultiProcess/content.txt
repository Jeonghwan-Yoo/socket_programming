10-1 프로세스의 이해와 활용
두 가지 유형의 서버
클라이언트를 생각한다면 모든 클라이언트의 만족도를 평균 이상으로 끌어올려야 한다.
선착순보다는 모든 연결요청자의 접속대기시간은 적게, 서비스를 제공받는데 걸리는 시간도 평균적으로 적게.

다중접속 서버의 구현방법들
전체적인 서비스 제공시간이 조금 늦어지더라도 연결요청을 해오는 모든 클라이언트에게 동시에 서비스를 제공해서 평균적인 만족도를 높일 필요가 있다.
네트워크 프로그램은 CPU의 연산을 필요치 않는 데이터의 송수신 시간이 큰 비중을 차지하므로, 둘 이상의 클라이언트에게 동시에 서비스를 제공하는 것이
CPU를 보다 효율적으로 사용하는 방법이 된다.
멀티프로세스 기반 서버:다수의 프로세스를 생성하는 방식으로 서비스 제공
멀티플렉싱 기반 서버:입출력 대상을 묶어서 관리하는 방식으로 서비스 제공
멀티쓰레딩 기반 서버:클라이언트의 수만큼 쓰레드를 생성하는 방식으로 서비스 제공
멀티프로세스 기반 서버는 Windows에는 적질지 않는(지원하지 않는) 방식이어서 Linux에 초점을 맞춘다.

Process의 이해
프로세스는 메모리 공간을 차지한 상태에서 실행중인 프로그램.
다운 받아서 하드디스크에 저장한 것은 프로그램.
프로그램은  Main Memory로 이동해서 실행을 위한 준비를 마치게 되는데, 이 시점부터 프로세라 부를 수 있게 된다.
프로그램을 둘 이상 동시에 실행하게 되면, 실행하는 수만큼 프로세스는 생성된다.
실행되는 수만큼 메모리 공간을 차지하기 때문이다.
프로세스는 운영체제의 관점에서 프로그램 흐름의 기본 단위가 되며, 여러 개의 프로세스가 생성되면 이들은 동시에 실행이 된다.
그러나 하나의 프로그램이 실행되는 과정에서 여러 개의 프로세스가 생성되기도 한다.

CPU의 코어 수와 프로세스 수
CPU에는 실제 연산장치에 해당하는 코어가 둘 이상 존재할 수 있으며, 코어의 수만큼 프로세스는 동시 실행이 가능하다.
반면 코어의 수를 넘어서는 개수의 프로세스가 생성되면, 프로세스 별로 코어에 할당되는 시간이 나뉘게 된다.
그러나 CPU가 고속으로 프로세스를 실행하기 때문에 우리는 모든 프로세스가 동시에 실행되는 것처럼 느끼게 된다.

프로세스 ID
모든 프로세스는 생성되는 형태에 상관없이 운영체제로부터 ID를 부여 받는다.
이를 프로세스 ID라 하는데 이는 2이상의 정수 형태.
숫자 1은 운영체제가 시작되자마자 실행되는 (운영체제의 실행을 돕는) 프로세스에게 할당되기 때문에 1이라는 값의 ID를 받을 수 없다.
ps 명령어를 통해서 실행중인 프로세스를 간단히 확인할 수 있다.
ps 명령어에 옵션 a와 u를 지정해서 모든 프로세스에 대한 다양한 정보를 확인할 수 있게 하였다.

fork 함수호출을 통한 프로세스의 생성
#include <unistd.h>
pid_t fork(void); // 성공 시 프로세스 ID, 실패 시 -1 반환
fork 함수는 호출한 프로세스의 복사본을 생성한다.
이미 실행중인, fork 함수를 호출한 프로세스를 복사하는 것이다.
그리고는 두 프로세스 모두 fork 함수의 호출 이후 문장을 실행하게 된다. (fork 함수의 반환 이후)
완전히 동일한 프로세스로, 메모리 영역까지 동일하게 복사하기 때문에 이후의 프로그램 흐름은 fork 함수의 반환 값을 기준으로 나뉘도록 프로그래밍을 해야 한다.
다음 특징을 이용해서 프로그램의 흐름을 구분해야 한다.
부모 프로세스:fork함수의 반환 값은 자시 프로세스의 ID
자식 프로세스:fork함수의 반환 값은 0
Parent Process는 fork 함수를 호출한 주체.
Child Process는 부모 프로세스의 fork 함수 호출을 통해서 복사된 프로세스를 의미.
Parent Process                                                           Child Process
int gval = 10;                                                           // gval은 11로 복사
int main(void) {                                                         int main(void) {
    int lval = 20;                                                           // lval은 25로 복사
    lval += 5;                                                               ...
    gval++;                                                  
    pid_t pid = fork(); // 복사 발생 지점. pid는 자식 프로세스 ID              pid_t pid = fork(); // pid는 0
    if (pid == 0)                                                            if (pid == 0)
        gval++;                                                                  gval++; // 실행
    else                                                                     else
        lval++; // 실행                                                          lval++;
}                                                                        }
부모 프로세스가 fork 함수를 호출하는 순간 자식 프로세스가 복사되어 각각이 fork 함수호출의 반환 값을 받게 된다.
증가된 상태로 복사가 이뤄진다.
부모 프로세스는 lval의 값을 1증가 시키지만, 자식 프로세스의 lval에 영향을 미치지 않는다.
자식 프로세스는 gval의 값을 1증가시키지만, 부모 프로세스의 gval에 영향을 미치지 않는다.
fork 함수 호출 이후에는 두 프로세스가 동일한 코드를 실행하는 완전히 다른 프로세스가 되기 때문.
fock.c
fork 함수호출 이후에 부모 프로세스와 자식 프로세스가 서로 완전히 분리된 메모리 구조를 지님.

10-2 프로세스 & Zombie 프로세스
프로세스도 생성 못지않게 소멸이 중요하다.

Zombie 프로세스
프로세스가 생성되고 할 일을 다하면(main 함수의 실행을 완료하면) 사라져야 하는데 사라지지 않고 좀비가 되어 시스템의 중요한 리소스를 차지하기도 한다.
좀비 프로세스를 소멸시켜야 한다. 안그러면 계속해서 살아난다.

좀비 프로세스의 생성 이유
자식 프로세스가 종료되는 상황
1. 인자를 전달하면서 exit를 호출하는 경우
2. main 함수에서 return 문을 실행하면서 값을 반환하는 경우
exit 함수로 전달되는 인자 값과 main 함수의 return문에 의해 반환되는 값 모두 운영체제로 전달된다.
운영체제는 이 값이 자식 프로세스를 생성한 부모 프로세스에게 전달될 때까지 자식 프로세스를 소멸시키지 않는데, 좀비 프로세스라 한다.
자식 프로세스를 좀비 프로세스로 만드는 주체는 운영체제이다.
부모 프로세스가 가만히 있는데 운영체제가 알아서 값을 전달해주지는 않는다.
부모 프로세스의 적극적인 요청이 있어야(함수 호출이 있어야) 운영체제는 값을 전달해 준다.
즉, 부모 프로세스가 자식 프로세스의 전달 값을 요청하지 않으면, 운영체제는 그 값을 계속해서 유지하게 되고 결국 자식 프로세스는 좀비가 된다.
zombie.c
30초 내에 ps au 명령어를 이용해 STAT이 Z+인지 확인한다.
30초의 대기시간이 지나서 부모 프로세스가 종료되면 좀비가 된 자식 프로세스가 함께 소멸된다.

Background Processing
콘솔 창에서 명령어의 실행을 뒤에서 진행하도록 하는 방식이다.
./zombie &와 같이 &의 입력이 후면 처리를 유도한다.
프로그램의 실행과는 별도로 다음 명령을 추가로 입력할 수 있기 때문에 좀비의 확인을 위해서 다른 콘솔 창으로 옮겨가지 않아도 된다.

좀비 프로세스의 소멸1:wait 함수의 사용
자식 프로세스의 소멸을 위해서는 부모 프로세스가 자식 프로세스의 전달 값을 요청해야 함.
#include <sys/wait.h>
pid_t wait(int* statloc); // 성공 시 종료된 자식 프로세스의 ID, 실패 시 -1 반환
함수가 호출되었을 때, 이미 종료된 자식 프로세스가 있다면, 자식 프로세스가 종료되면서 전달한 값(exit 함수의 인자, main 함수의 return)이
매개변수로 전달된 주소의 변수에 저장된다.
변수에 저장되는 값에는 자식 프로세스가 종료되면서 전달한 값 이외에도 다른 정보가 함께 포함되어 있으니, 매크로 함수를 통해 값의 분리 과정을 거쳐야 한다.
WIFEXITED:자식 프로세스가 정상 종료한 경우 true을 반환한다.
WEXITSTATUS:자식 프로세스의 전달 값을 반환한다.
wait함수의 인자로 변수 status의 주소 값이 전달되었다면, 다음과 같은 유형의 코드를 구성해야 한다.
if (WIFEXITED(status)) { // 정상 종료하였는가?
    puts("Normal termination!");
    printtf("Child pass num : %d", WXITSTAUS(status)); // 그렇다면 반환 값은?
}
wait.c
PID에 해당하는 프로세스가 존재하지 않는다.
wait함수의 호출로 인해서 완전히 사라짐.
두 자식 프로세스가 종료되면서 3, 7을 전달.
wait 함수는 호출된 시점에서 종료된 자식 프로세스가 없다면, 임의의 자식 프로세스가 종료될 때까지 Blocking 상태에 놓인다.
그래서 함수의 호출에 주의해야 한다.

좀비 프로세스의 소멸2:waitpid 함수의 사용
wait 함수의 블로킹이 문제가 된다면 waitpid 함수의 호출을 고려하면 된다.
#include <sys/wait.h>
pid_t waitpid(pid_t pid, int* statloc, int options); // 성공 시 종료된 자식 프로세스의 ID(또는 0), 실패 시 -1 반환
pid:종료를 확인하고자 하는 자식 프로세스의 ID 전달, 이를 대신해서 -1을 전달하면 wait 함수와 마찬가지로 임의의 자식 프로세스가 종료되기를 기다린다.
statloc:wait함수의 매개변수와 동일)
options:헤더파일 sys/wait.h에 선언된 상수 WNOHANG을 인자로 전달하면, 종료된 자식 프로세스가 존재하지 않아도 블로킹 상태에 있지 않고 0을 반환하면서 빠져 나온다.
waitpid.c

10-3 시그널 핸들링
대부분의 상황에서 부모 프로세스도 자식 프로세스 못지 않게 바쁘다.
따라서 자식 프로세스의 종료를 기다리면서 waitpid 함수만 호출할 수는 없다.

운영체제야! 네가 좀 알려줘
자식 프로세스 종료의 인식주체는 운영체제이다.
운영체제가 해당 부모 프로세스에게 자식 프로세스가 종료되었다고 알려주면 부모 프로세스는 잠시 멈추고 처리하면 된다.
Signal은 특정상황이 발생했음을 알리기 위해 운영체제가 프로세스에게 전달하는 메시지를 의미한다.
그리고 그 메시지에 반응해서 메시지와 연관된, 미리 정의된 작업이 진행되는 것을 시그널 핸들링.

잠시 JAVA 얘기를:열려있는 사고를 지니자!
JAVA를 보면 프로세스나 쓰레드의 생성방법을 프로그래밍 언어 차원에서 제공하고 있다.
그러나 C, C++언어는 언어차원에서 지원하지 않는다.
ANSI 표준에서 이의 지원을 위한 함수를 정의하고 있지 않다.
프로세스나 쓰레드는 지극히 운영체제 차우너에서 지원되는 것들.
Windows면 Windows 방식, Linux면 Linux 방식대로 프로세스 또는 쓰레드를 생성해야 한다.
JAVA는 플랫폼 독립이라는 특성의 유지를 위해서 운영체제에 상관없이 동일하게 적용되는 프로세스 및 쓰레드의 생성방법을 제공해야 한다.
그래서 언어차원에서 프로세스와 쓰레드의 생성밥법을 제공하게 된 것.
JAVA 기반에서 네트워크 프로그래밍을 하면 운영체제로부터 자유로워지는 것은 사실.
언어차원에서 모든 것이 제공되면, 그만큼 언어를 공부하는데 필요한 노력이 많이 든다.
자바는 분산환경에서 이상적인 네트워크 모델을 제공한다.
기술에 대한 선입견은 한계를 정하는 것과 같다.

시그널과 signal 함수
프로세스:운영체제야! 내가 생성한 자식 프로세스가 종료되면 zombie_handler라는 이름의 함수 좀 호출해줘라!
운영체제:그래! 자식 프로세스가 종료되면, zombie_handler라는 이름의 함수를 내가 대신 호출해줄테니, 잘 묶어둬!
프로세스는 시그널 등록을 해야되는데 자식 프로세스의 종료라는 상황 발생시, 특정 함수의 호출을 운영체제에게 요구하는 것이다.
시그널 등록 함수
#include <signal.h>
void (*signal(int signo, void (*func)(int)))(int); // 시그널 발생시 호출되도록 이전에 등록된 함수의 포인터 반환
첫 번째 인자로 특정 상황에 대한 정보를, 두 번째 인자로 특정 상황에서 호출될 함수의 주소 값(포인터)을 전달한다.
그러면 명시된 상황 발생시, 전달된 주소 값의 함수가 호출된다.
SIGALRM:alarm 함수호출을 통해서 등록된 시간이 된 상황
SIGINT:CTRL+C가 입력된 상황
SIGCHLD:자식 프로세스가 종료된 상황
두 가지 요청에 해당하는 signal 함수의 호출문장을 각각 만들 수 있다.
signal(SIGALRM, timeout);
signal(SIGINT, keycontrol);
이렇게 시그널이 등록되면, 등록된 시그널 발생시, 운영체제는 해당 시그널에 등록된 함수를 호출해준다.

#include <unistd.h>
unsigned int alarm(unsigned int seconds); // 0 또는 SIGALRM 시그널이 발생하기까지 남아있는 시간을 초 단위로 반환
위 함수를 호출하면서 양의 정수를 인자로 전달하면, 전달된 수에 해당하는 시간(초 단위)이 지나서 SIGALRM 시그널이 발생한다.
그리고 0을 인자로 전달하면 이전에 설정된 SIGALRM 시그널 발생의 예약이 취소된다.
시그널의 발생을 예약만 해놓고, 호출되어야 할 함수를 지정하지 않으면 프로세스가 그냥 종료되어 버리니 주의해야 한다.
signal.c
시그널이 발생하면 sleep 함수의 호출로 블로킹 상태에 있던 프로세스가 깨어납니다.
함수의 호출을 유도하는 것은 운영체제이지만, 프로세스가 잠들어 있는 상태에서 함수가 호출될 수는 없다.
따라서 시그널이 발생하면, 시그널에 해당하는 시그널 핸들러의 호출을 위해서 sleep 함수의 호출로 블로킹 상태에 있던 프로세스는 깨어나게 된다.
그리고 한번 깨어나면 다시 잠들지 않는다.

sigaction 함수를 이용한 시그널 핸들링
signal 함수를 대체할 수 있고, 훨씬 안정적으로 동작한다.
signal 함수는 유닉스 계열의 운영체제 별로 동작방식에 있어서 약간의 차이가 보일 수 있지만, sigaction 함수는 차이를 보이지 않는다.
signal은 과거 프로그램과의 호환성을 위해서 유지만 되고 있다.
#include <signal.h>
int sigaction(int signo, const struct sigaction* act, struct sigaction* oldact); // 성공 시 0, 실패 시 -1 반환
signo:시그널의 정보를 인자로 전달.
act:첫 번째 인자로 전달된 상수에 해당하는 시그널 발생시 호출될 함수(시그널 핸들러)의 정보 전달.
oldact:이전에 등록되었던 시그널 핸들러의 함수 포인터를 얻는데 사용되는 인자, 필요 없다면 0 전달.
위 함수의 호출을 위해서는 sigaction이라는 이름의 구조체 변수를 선언 및 초기화해야 한다.
struct sigaction {
    void (*sa_handler)(int);
    sigset_t sa_mask;
    int sa_flags;
};
sa_handler에 시그널 핸들러의 함수 포인터 값(주소 값)을 저장하면 된다.
그리고 sa_mask는 모든 비트를 0으로, sa_flags는 0으로 초기화한다.
두 멤버는 시그널 관련 옵션 및 특성의 지정에 사용.
sigaction.c

시그널 핸들링을 통한 좀비 프로세스의 소멸
자식 프로세스가 종료된 상황에 대한 시그널 이름이 SIGCHLD라는 사실만 알면 쉽게 작성할 수 있다.
remove_zombie.c

10-4 멀티태스킹 기반의 다중접속 서버
프로세스 기반의 다중접속 서버의 구현 모델
에코서버 
부모 <--------- 에코클라이언트
 ↓(2)   연결요청(1)  ↑
자식 <---------------┘ 
      연결완료(3)
클라이언트의 서비스 요청이 있을 때마다 에코 서버는 자식 프로세스를 생성해서 서비스를 제공한다.
서비스를 요청하는 클라이언트의 수가 다섯이라면 에코 서버는 추가로 다섯 개의 자식 프로세스를 생성해서 서비스를 제공한다.
1. 에코 서버(부모 프로세스)는 accept 함수호출을 통해서 연결요청을 수락한다.
2. 이때 얻게 되는 소켓의 파일 디스크립터를 자식 프로세스를 생성해서 넘겨준다.
3. 자식 프로세스는 전달받은 파일 디스크립터를 바탕으로 서비스를 제공한다.
자식 프로세스는 부모 프로세스가 소유하고 있는 것을 전부 복사하기 때문에 파일 디스크립터를 넘기는 과정은 별도로 거칠 필요가 없다.

다중접속 에코 서버의 구현
echo_mpserv.c
다수의 클라이언트에게 에코 서비스가 동시에 제공된다.

fork 함수호출을 통한 파일 디스크립터의 복사
부모 프로세스가 지니고 있던 두 소켓(서버 소켓, 클라이언트와 연결된 소켓)의 파일 디스크립터가 자식 프로세스에게 복사되었다.
사실 소켓은 프로세스의 소유가 아니다. 소켓은 운영체제의 소유다.
다만 해당 소켓을 의미하는 파일 디스크립터만 이 프로세스의 소유인 것이다.
소켓이 복사된다면 동일한 port에 할당된 소켓이 둘 이상이 될 것이기에 이치에 맞지 않는다.
fork 함수의 호출결과는 하나의 소켓에 두 개의 파일 디스크립터가 할당된 모습을 보인다.
┌ parent process
│ child process ────────────┐
│                           │
│  operating system         │
├> server socket <──────────┤
└> client connected socket <┘
하나의 소켓에 두 개의 파일 디스크립터가 존재하는 경우, 두 개의 파일 디스크립터가 모두 종료되어야 소켓은 소멸된다.
이런 식이면 이후에 자식 프로세스가 클라이언트가 연결되어 있는 소켓을 소멸하려 해도 소멸되지 않고 계속 남아 있게 된다. (서버 소켓도 마찬가지)
그래서 fork 함수호출 후에는 서로에게 상관이 없는 소켓의 파일 디스크립터를 닫아줘야 한다.
┌ parent process
│ child process ────────────┐
│                           │
│  operating system         │
└> server socket            │
   client connected socket <┘
그래서 close 함수를 호출한 것.

10-5 TCP의 입출력 routine 불할
입출력 루틴 분할의 의미와 이점
지금까지는 서버로 데이터를 전송한다. 그리고 데이터가 에코되어 돌아올 때까지 기다린다.
무조건 기다리고 에코되어 돌아온 데이터를 수신하고 나서야 비로소 데이터를 추가로 전송할 수 있다.
한번 데이터를 전송하면 에코 되어 돌아오는 데이터를 수신할 때까지 마냥 기다려야 했다.
이유는 흐름이 read와 write를 반복하는 구조였기 때문이다.
이렇게밖에 구현할 수 없었던 이유는 하나의 프로세스를 기반으로 프로그램이 동작했기 때문이다.
둘 이상의 프로세스를 생성할 수 있으니 데이터의 송신과 수신을 분리해보자.
에코 서버 <---------> 에코 클라이언트 -> read -> parent process
                             ↑                      ↓fork
                             └------- write <- child process
클라이언트의 부모 프로세스는 데이터의 수신을 담당하고, 생성된 자식 프로세스는 데이터의 송신을 담당한다.
입력과 출력을 담당하는 프로세스가 각각 다르기 때문에 서버로부터의 데이터 수신여부에 상관없이 데이터를 전송할 수 있다.
이러한 구현방식의 가장 중요한 이유는 프로그램의 구현이 한결 수월해진다는데 있다.
프로세스 생성 이후에 부모 프로세스가 실행하는 영역은 데이터의 수신과 관련해서만 코드를 작성하면 되고, 
자식 프로세스가 실행하는 영역은 데이터의 송신과 관련해서만 코드를 작성하면 되기 때문에 코드의 구현이 보다 수월하다.
하나의 프로세스 내에서 데이터의 송수신을 모두 진행하게끔 구현하려면 신경 쓸 부분이 많아진다.

에코 클라이언트에서 입출력 루틴을 분리할 필요는 없습니다.
에코 클라이언트는 입출력 루틴을 분리시킬만한 특별한 근거를 지니고 있지 않다.

또한, 데이터 송수신이 잦은 프로그램의 성능향상을 들 수 있다.
client    server   ------>    client    server
  ->        ->                  ->        ->
  <-        <-                  <->       <->
  ->        ->                  <->       <->
  <-        <-                  <->       <->
일단 서버에서의 차이는 없다.
입출력 루틴이 분리된 클라이언트는 데이터의 수신여부에 상관없이 데이터 전송이 가능하기 때문에 연속해서 데이터의 전송이 가능하다.
동일한 시간 내에서의 분량이 상대적으로 많을 수 밖에 없다.

에코 클라이언트의 입출력 루틴 분할
echo_mpclient.c
메시지의 수신여부에 상관없이 키보드로 문자열을 입력할 때마다 출력되기 때문에 출력의 형태가 이상할 수 있다.
